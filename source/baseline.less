//! order.less v0.9.0 | Apache License, Version 2.0 | github.com/chromice/order.less

// =================
// = baseline.less =
// =================
// 
// This module allows you define the basline and adjust elements' height, padding, margin
// and offset as fractions of the baseline, while making sure that the first line of every
// block sits on baseline.
// 
// You can set the baseline font size in pixels like this:
// 
// 		.use-baseline(
// 			16px,  // baseline font size (pixels) -> @baseline-size
// 			1.5,   // baseline height (ratio) -> @baseline-height
// 			0.898  // baseline offset for Verdana (ratio) -> @baseline-offset
// 		);
// 		
// 		h1 {
// 			.adjust-baseline(36px, 1.25);
// 			// sets font-size to 36px/2.25rem and line-height to 1.25
// 			// and shifts it to baseline
// 			.margin-top(2); // margin-top: 48px; margin-top: 3rem;
// 			border-bottom: 1px solid; // we need to allow for this by descreasing the padding
// 			.padding-bottom(0.5, -1px); // margin-bottom: 24px; margin-top: calc(1.5rem - 1px);
// 			.margin-bottom(0.5); // margin-top: 24px; margin-top: 1.5rem;
// 		}
// 
// Or use the scale:
// 
// 		.use-scale(16px, 20px, 1.5);
// 		.use-baseline(
// 			0,    // font size step (integer) -> @baseline-size (pixels)
// 			1.5,  // baseline height (ratio) -> @baseline-height
// 			0.898 // baseline offset for Verdana (ratio) -> @baseline-offset
// 		);
// 
// 		h1 {
// 			.adjust-baseline(4, 1.25);
// 		}
// 
// 
// Alternative, you can define each font using 3 variables:
// 
// 		@verdana-font-offset: 0.898;
// 		@verdana-font-variation: italic 400;
// 		@verdana-font-family: 'Verdana', sans-serif;
// 		
// 		.use-baselie(16px, 1.5, verdana);
// 		
// 		h1 {
// 			.font-align(36px, 1.25); 
// 			// additionally sets the font-family (via @verdana-font-family) 
// 			// and font-variant/weight/style (via @verdana-font-variation)
// 		}


// 
// Font offset as name
// 
.use-baseline (@size, @height, @name) when (iskeyword(@name)) {
	
	@baseline-name: @name;
	@-offset: "@{name}-font-offset";
	
	.use-baseline(@size, @height, @@-offset);
	
	
	//
	// Property mixins
	//
	
	// Font property "shorthand" mixin
	.font (@font-size, @line-height: @baseline-height, @font-name: @baseline-name) {
		
		@-offset: "@{font-name}-font-offset";
		@-variation: "@{font-name}-font-variation";
		@-family: "@{font-name}-font-family";
		
		.set-baseline(@font-size, @line-height, @@-offset);
		font: @@-variation @current-size~"/"@current-height @@-family;
		font-size: unit((@current-size / @baseline-size), rem);
	}
	
	
	// .font() + .align-baseline()
	.font-align (@font-size, @line-height: @baseline-height, @font-name: @baseline-name) {
		.font(@font-size, @line-height, @font-name);
		.align-baseline();
	}
}


// 
// Base size as a scale step
// 
.use-baseline (@step, @height, @offset: 0.85) when (unit(@step) = ~"@{step}") and not(iskeyword(@offset)) {
	.get-scale-size(@step);
	.use-baseline(@scale-size, @height, @offset);
}
.use-baseline (@size, @height, @offset, @alt-step, @alt-height, @alt-offset) when (ispixel(@size)) and (unit(@alt-step) = ~"@{alt-step}") {
	.get-scale-size(@alt-step);
	.use-baseline(@size, @height, @offset, @scale-size, @alt-height, @alt-offset);
}


// 
// Base size in pixels
// 
.use-baseline (@size, @height, @offset: 0.85) when (ispixel(@size)) and not(iskeyword(@offset)) {
	.use-baseline(@size, @height, @offset, @size, @height, @offset);
}
.use-baseline (@size, @height, @offset, @alt-size, @alt-height, @alt-offset) when (ispixel(@size)) and (ispixel(@alt-size)) {
	
	// Main baseline values
	@baseline-size: @size;
	@baseline-height: @height;
	@baseline-offset: @offset;
	
	// Adjusted baseline values
	@current-size: @alt-size;
	@current-height: @alt-height;
	@current-offset: @alt-offset;
	
	@-diff-height: (@baseline-height * @baseline-size - @current-height * @current-size);
	@-diff-font-size: (@current-size * (@current-offset - 0.5) - @baseline-size * (@baseline-offset - 0.5));
	
	// Calculated top and bottom baseline offsets
	@offset-top: (unit(mod(@-diff-height / 2 - @-diff-font-size, @baseline-size * @baseline-height) / @baseline-size, rem));
	@offset-bottom: (unit(mod(@-diff-height, @baseline-size * @baseline-height) / @baseline-size, rem));
	
	
	//
	// Show baseline
	//
	.show-baselines(@offset: @baseline-offset, @color: red) {
		
		@-linear-gradien: fade(@color, 40%) 1px, transparent 1px, transparent;
		
		background-image+: linear-gradient(to bottom, @-linear-gradien);
		background-size+: 2px (@baseline-height * @baseline-size);
		background-position+: 0 round((-1px - (@offset - 0.5) * @baseline-size));
	}
	
	
	//
	// Baseline manipulation mixins
	//
	
	// Set a new baseline
	.set-baseline (@alt-size, @alt-height: @baseline-height, @alt-offset: @baseline-offset) {
		// FIXME: Using @size, @height, @offset parameter names does not yield correct results. WTF?
		.use-baseline(@baseline-size, @baseline-height, @baseline-offset, @alt-size, @alt-height, @alt-offset);
	}
	
	// Reset baseline to default values
	.reset-baseline () {
		.use-baseline(@baseline-size, @baseline-height, @baseline-offset);
	}
	
	// Shift text to the main baseline
	.align-baseline () {
		position: relative;
		top: @offset-top;
	}
	.align-baseline (@size, @height: @baseline-height, @offset: @baseline-offset) {
		.set-baseline(@size, @height, @offset);
		.align-baseline();
	}
	
	// Set font size and line height
	.resize-baseline () {
		font-size: @current-size;
		font-size: unit((@current-size / @baseline-size), rem);
		line-height: @current-height;
	}
	.resize-baseline (@size, @height: @baseline-height, @offset: @baseline-offset) {
		.set-baseline(@size, @height, @offset);
		.resize-baseline();
	}
	
	// Adjust alignment, font size and line height
	.adjust-baseline () {
		.align-baseline();
		.resize-baseline();
	}
	.adjust-baseline (@size, @height: @baseline-height, @offset: @baseline-offset) {
		.set-baseline(@size, @height, @offset);
		.adjust-baseline();
	}
	
	
	//
	// Property mixins
	//
	
	// Baseline height
	.height (@span, @nudge: 0) when (unit(@span) = ~"@{span}") {
		.-baseline-property(height, @span, @nudge);
	}
	.min-height (@span, @nudge: 0) when (unit(@span) = ~"@{span}") {
		.-baseline-property(min-height, @span, @nudge);
	}
	.max-height (@span, @nudge: 0) when (unit(@span) = ~"@{span}") {
		.-baseline-property(max-height, @span, @nudge);
	}
	
	// Baseline offset
	.top (@span, @nudge: 0) when (unit(@span) = ~"@{span}") {
		.-baseline-property(top, @span, @nudge, @offset-top);
	}
	.bottom (@span, @nudge: 0) when (unit(@span) = ~"@{span}") {
		.-baseline-property(bottom, @span, @nudge, (@offset-top * -1));
	}
	
	// Baseline padding
	.padding-top (@span, @nudge: 0) when (unit(@span) = ~"@{span}") {
		.-baseline-property(padding-top, @span, @nudge);
	}
	.padding-bottom (@span, @nudge: 0) when (unit(@span) = ~"@{span}") {
		.-baseline-property(padding-bottom, @span, @nudge);
	}
	
	// Baseline margin
	.margin-top (@span, @nudge: 0) when (unit(@span) = ~"@{span}") {
		.-baseline-property(margin-top, @span, @nudge);
	}
	.margin-bottom (@span, @nudge: 0) when (unit(@span) = ~"@{span}") {
		.-baseline-property(margin-bottom, @span, @nudge, @offset-bottom);
	}
	
	
	//
	// Private mixins
	//
	
	// Set property values
	.-baseline-property (@property, @span, @nudge: 0, @correction: 0) when not(@span = 0) and (@nudge = 0) and (@correction = 0) {
		.get-baseline-height(@span);
		
		@{property}: @baseline-height-px;
		@{property}: @baseline-height-rem;
	}
	.-baseline-property (@property, @span, @nudge: 0, @correction: 0) when (@span = 0) and (@nudge = 0) and (@correction = 0) {
		@{property}: 0;
	}
	.-baseline-property (@property, @span, @nudge: 0, @correction: 0) when not(@nudge = 0) and (@correction = 0) {
		.get-baseline-height(@span);
		
		@{property}: @baseline-height-px;
		@{property}: calc(@baseline-height-rem ~"+" @nudge);
	}
	.-baseline-property (@property, @span, @nudge: 0, @correction: 0) when (@nudge = 0) and not(@correction = 0) {
		.get-baseline-height(@span);
		
		@{property}: @baseline-height-px;
		@{property}: calc(@baseline-height-rem ~"+" @correction);
	}
	.-baseline-property (@property, @span, @nudge: 0, @correction: 0) when (default()) {
		.get-baseline-height(@span);
		
		@{property}: @baseline-height-px;
		@{property}: calc(@baseline-height-rem ~"+" @nudge ~"+" @correction);
	}
	
	// Calculate baseline values
	.get-baseline-height (@span, @base: @baseline-size) {
		@-height-px-value: round(unit((@span * @baseline-size * @baseline-height)), 8);
		@-height-rem-value: round(unit((@span * @baseline-height)), 8);
		@baseline-height-px: ~"@{-height-px-value}px";
		@baseline-height-rem: ~"@{-height-rem-value}rem";
	}
}