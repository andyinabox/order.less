//! Order.less v1.0.0 | Apache License, Version 2.0 | github.com/chromice/order.less

// ==============
// = scale.less =
// ==============
// 
// This module allows you to generate single- or double-stranded modular scales 
// as described in [More Meaningful Typography](http://bit.ly/QdYiL8) by Tim Brown:
// 
// 

// -----------------
// - Common mixins -
// -----------------

.use-modular-scale (@primary: 'always', @secondary: 'export', @ratio: 'this') {
	
	// Font size
	.font-size (@step) when (isunit(@step, '')) {
		.get-scale-size(@step);
		
		font-size: @scale-size;
		font-size: unit((@scale-size / @scale-base), rem);
	}
}

// -------------------
// - Single-stranded -
// -------------------
// 
//   .use-modular-scale(
//       16px, // base size (step 0) -> @scale-base
//       (2/3) // step ratio -> @scale-ratio
//   );
//   
//   html {
//       font-size: @scale-base;
//   }
//   
//   h1 {
//       .font-size(4); // font-size: 54px; font-size: 3.375rem;
//   }

.use-modular-scale (@primary, @ratio) when (ispixel(@primary)) and (isunit(@ratio, '')) and (@ratio < 1) {
	
	@scale-base: @primary;
	@scale-ratio: @ratio;
	
	// Calculate scale size at a particular particular step
	.get-scale-size (@step) {
		@scale-size: (@scale-base * pow(1 / @scale-ratio, @step));
	}
}

// -------------------
// - Double-stranded -
// -------------------
// 
//   .use-modular-scale(
//       16px, // base size (step 0) -> @scale-base
//       20px, // alternative size -> @scale-alternative
//       (2/3) // step ratio -> @scale-ratio
//   );
//   
//   html {
//       font-size: @scale-base;
//   }
//   
//   h1 {
//       .font-size(4); // font-size: 36px; font-size: 2.25rem;
//   }

.use-modular-scale (@primary, @secondary, @ratio) when (@primary < @secondary) and (ispixel(@primary)) and (ispixel(@secondary)) and (isunit(@ratio, '')) and (@ratio < 1) {
	
	@scale-base: @primary;
	@scale-alternative: @secondary;
	@scale-ratio: @ratio;
	
	
	// Calculate @-power-diff value
	.-find-power-diff (@counter) when ((@scale-base * pow(1 / @scale-ratio, @counter)) < @scale-alternative) {
		.-find-power-diff((@counter + 1));
	}
	.-find-power-diff (@counter) when (default()) {
		@-power-diff: @counter;
	}
	.-find-power-diff(0);
	
	// Calculate scale size at a particular particular step
	.get-scale-size (@step) when (mod(round(@step), 2) = 0) {
		@scale-size: (@scale-base * pow(1 / @scale-ratio, @step / 2));
	}
	.get-scale-size (@step) when (default()) {
		@scale-size: (@scale-alternative * pow(1 / @scale-ratio, (@step - 1) / 2 - (@-power-diff - 1)));
	}
}

