// = = = = = = =
//  scale.less =
// = = = = = = =

.use-scale (@base: 16px, @alternative: 20px, @ratio: 1.5) when (@base < @alternative) and (ispixel(@base)) and (ispixel(@alternative)) {
	
	@scale-base: @base;
	@scale-alternative: @alternative;
	@scale-ratio: @ratio;
	
	// Font size
	.scale-font-size (@step) {
		.calculate-scale-vars(@step);
		
		font-size: @scale-size;
		font-size: unit((@scale-size / @scale-base), rem);
	}
	
	// TODO: Add scale support to baseline mixins 
	
	// Calculate @-power-diff value
	.find-power-diff (@counter) when ((@base * pow(@ratio, @counter)) < @alternative) {
		.find-power-diff((@counter + 1));
	}
	.find-power-diff (@counter) when (default()) {
		@-power-diff: @counter;
	}
	.find-power-diff(0);
	
	// Calculate scale size at a particular particular step
	.calculate-scale-vars (@step) when (mod(round(@step), 2) = 0) {
		@scale-size: (@base * pow(@ratio, @step / 2));
	}
	.calculate-scale-vars (@step) when (default()) {
		@scale-size: (@alternative * pow(@ratio, (@step - 1) / 2 - (@-power-diff - 1)));
	}
}