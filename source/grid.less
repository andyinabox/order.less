//! order.less v0.1.0 | Apache License, Version 2.0 | github.com/chromice/order.less

// = = = = = =
// grid.less =
// = = = = = =
.use-grid (@columns, @gutter, @width: 940px) {
	
	@grid-columns: @columns;
	@grid-gutter: @gutter;
	@grid-width: @width;
	
	// Column width
	.grid-width (@span, @base: @grid-columns) {
		.grid-width-property(width, @span, @base);
	}
	.grid-max-width (@span, @base: @grid-columns) {
		.grid-width-property(max-width, @span, @base);
	}
	.grid-min-width (@span, @base: @grid-columns) {
		.grid-width-property(min-width, @span, @base);
	}
	
	// Column offset
	.grid-margin-left (@span, @base: @grid-columns) {
		.grid-offset-property(margin-left, @span, @base);
	}
	.grid-margin-right (@span, @base: @grid-columns) {
		.grid-offset-property(margin-right, @span, @base);
	}
	.grid-padding-left (@span, @base: @grid-columns) {
		.grid-offset-property(padding-left, @span, @base);
	}
	.grid-padding-right (@span, @base: @grid-columns) {
		.grid-offset-property(padding-right, @span, @base);
	}
	.grid-left (@span, @base: @grid-columns) {
		.grid-offset-property(left, @span, @base);
	}
	.grid-right (@span, @base: @grid-columns) {
		.grid-offset-property(right, @span, @base);
	}
	
	// Gutter offset
	.gutter-margin-left (@span, @base: @grid-columns) {
		.grid-gutter-property(margin-left, @span, @base);
	}
	.gutter-margin-right (@span, @base: @grid-columns) {
		.grid-gutter-property(margin-right, @span, @base);
	}
	.gutter-padding-left (@span, @base: @grid-columns) {
		.grid-gutter-property(padding-left, @span, @base);
	}
	.gutter-padding-right (@span, @base: @grid-columns) {
		.grid-gutter-property(padding-right, @span, @base);
	}
	.gutter-left (@span, @base: @grid-columns) {
		.grid-gutter-property(left, @span, @base);
	}
	.gutter-right (@span, @base: @grid-columns) {
		.grid-gutter-property(right, @span, @base);
	}
	
	// CSS columns (experimental)
	.grid-column-count (@count) {
		-webkit-column-count: @count;
		-moz-column-count: @count;
		column-count: @count;
	}
	.grid-column-width (@span, @base: @grid-columns) {
		.grid-column-count(round((@base / @span)));
	}
	.gutter-column-gap (@span, @base: @grid-columns) {
		@-gap: (@grid-gutter * @span);
		
		-webkit-column-gap: @-gap;
		-moz-column-gap: @-gap;
		column-gap: @-gap;
	}
	
	// Set width values
	.grid-width-property (@property, @span, @base) when (@span > 0) and (@base > 0) {
		.get-width(@span, @base);
		
		@{property}: @width-fallback;
		@{property}: -webkit-calc(@width-calc);
		@{property}: calc(@width-calc);
	}
	.grid-width-property (@property, @span, @base) when (@span = 0), (@base =< 0) {
		@{property}: 0;
	}
	
	// Set offset values
	.grid-offset-property (@property, @span, @base) when not(@span = 0) and (@base > 0) {
		.get-offset(@span, @base);
		
		@{property}: @offset-fallback;
		@{property}: -webkit-calc(@offset-calc);
		@{property}: calc(@offset-calc);
	}
	.grid-offset-property (@property, @span, @base) when (@span = 0), (@base =< 0) {
		@{property}: 0;
	}
	
	// Set gutter values
	.grid-gutter-property (@property, @span, @base) when not(@span = 0) and (@span >= -1) and (@span =< 1) and (@base > 0) {
		.get-gutter(@span, @base);
		
		@{property}: @gutter-fallback;
		@{property}: -webkit-calc(@gutter-calc);
		@{property}: calc(@gutter-calc);
	}
	.grid-gutter-property (@property, @span, @base) when (@span = 0), (@base =< 0) {
		@{property}: 0;
	}
	
	// Calculate grid values
	.get-width (@span, @base) {
		.-get-grid-values(@span, @base);
	}
	.get-offset (@span, @base) {
		.-get-grid-values(@span, @base);
	}
	.get-gutter (@span, @base) {
		.-get-grid-values(@span, @base);
	}
	.-get-grid-values (@span, @base) {
		// Modern browsers that support calc():
		@-column-width: round((100% / @base * @span), 8);
		@-column-gutter: round(((@base - @span) / @base * @grid-gutter), 8);
		@width-calc: @-column-width ~"-" @-column-gutter;
		@offset-calc: @-column-width ~"+" abs((@grid-gutter - @-column-gutter));
		@gutter-calc: (@grid-gutter * @span);
		
		// IE8, Opera mini, Android and older versions of Safari:
		@-direction: (@span / abs(@span));
		@-base-width: (@grid-width * @base / @grid-columns);
		@-gutter: (percentage(@grid-gutter / @-base-width));
		@width-fallback: (@-column-width - percentage(@-column-gutter / @-base-width * @-direction));
		@gutter-fallback: (@-gutter * @span);
		@offset-fallback: (@width-fallback + @-gutter * @-direction);
	}
}