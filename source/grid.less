//! Order.less v1.0.1 | Apache License, Version 2.0 | github.com/chromice/order.less

// =============
// = grid.less =
// =============
// 
// This module allows you to define a column grid and set elements' width, padding, 
// margin and offset in columns. 
// 
// To use uniform grids with inner gutters (i.e. 3 column grid having 2 gutters in 
// between those columns):
// 
//     .use-column-grid(
//         940px, // optimal grid width (pixels)  -> @grid-width
//         20px,  // gutter (pixels) -> @grid-gutter
//         12     // number of columns in the grid -> @grid-columns
//     );
//     
//     body {
//         .width(6); 
//         .margin-left(3);
//         
//         > * {
//             float: left;
//             .width(2, 6);
//             .margin-right(@grid-gutter, 6);
//             
//             &:nth-child(3n) {
//                 .margin-right(0);
//             }
//         }
//     }
// 
// Alternatively you can define a grid via a set of variables and reference it by name:
// 
//     @desktop-grid-width: 940px;
//     @desktop-grid-gutter: 20px;
//     @desktop-grid-columns: 12;
//     
//     .use-column-grid(desktop);
// 


.use-column-grid (@name) when (iskeyword(@name)) {
	
	@-width: "@{name}-grid-width";
	@-gutter: "@{name}-grid-gutter";
	@-columns: "@{name}-grid-columns";
	
	.use-column-grid(@@-width, @@-gutter, @@-columns);
}

.use-column-grid (@width, @gutter, @columns) when (ispixel(@width)) and (isunit(@columns, '')) and (ispixel(@gutter)) {
	
	@grid-width: @width;
	@grid-gutter: @gutter;
	@grid-columns: @columns;
	
	
	//
	// Show grid columns or gutter
	//
	.show-columns (@base: @grid-columns, @color: blue) {
		.-show-grid(@base, transparent, fade(@color, 12.5%));
	}
	.show-gutters (@base: @grid-columns, @color: red) {
		.-show-grid(@base, fade(@color, 12.5%), transparent);
	}
	.-show-grid (@base, @color-gutter, @color-column) {
		@-calc-width: round((100% / @base), 8) ~"-" round(((@base - 1) / @base * @grid-gutter), 8) ~"+" @grid-gutter;
		
		background-image+: linear-gradient(to right, @color-gutter @grid-gutter, @color-column @grid-gutter, @color-column);
		background-size+: calc(@-calc-width) 2px;
		background-position+: (-@grid-gutter) 0;
	}
	
	
	//
	// Property mixins: @span + @base
	//
	
	// Column width
	.width (@span, @base: @grid-columns) when (isunit(@span, '')) and (isunit(@base, '')) {
		.-column-width-property(width, @span, 0, @base);
	}
	.max-width (@span, @base: @grid-columns) when (isunit(@span, '')) and (isunit(@base, '')) {
		.-column-width-property(max-width, @span, 0, @base);
	}
	.min-width (@span, @base: @grid-columns) when (isunit(@span, '')) and (isunit(@base, '')) {
		.-column-width-property(min-width, @span, 0, @base);
	}
	
	// Column offset
	.margin-left (@span, @base: @grid-columns) when (isunit(@span, '')) and (isunit(@base, '')) {
		.-column-offset-property(margin-left, @span, 0, @base);
	}
	.margin-right (@span, @base: @grid-columns) when (isunit(@span, '')) and (isunit(@base, '')) {
		.-column-offset-property(margin-right, @span, 0, @base);
	}
	.padding-left (@span, @base: @grid-columns) when (isunit(@span, '')) and (isunit(@base, '')) {
		.-column-offset-property(padding-left, @span, 0, @base);
	}
	.padding-right (@span, @base: @grid-columns) when (isunit(@span, '')) and (isunit(@base, '')) {
		.-column-offset-property(padding-right, @span, 0, @base);
	}
	.left (@span, @base: @grid-columns) when (isunit(@span, '')) and (isunit(@base, '')) {
		.-column-offset-property(left, @span, 0, @base);
	}
	.right (@span, @base: @grid-columns) when (isunit(@span, '')) and (isunit(@base, '')) {
		.-column-offset-property(right, @span, 0, @base);
	}
	
	
	//
	// Property mixins: @nudge + @base
	//
	
	// Column offset
	.margin-left (@nudge, @base: @grid-columns) when (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-offset-property(margin-left, 0, @nudge, @base);
	}
	.margin-right (@nudge, @base: @grid-columns) when (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-offset-property(margin-right, 0, @nudge, @base);
	}
	.padding-left (@nudge, @base: @grid-columns) when (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-offset-property(padding-left, 0, @nudge, @base);
	}
	.padding-right (@nudge, @base: @grid-columns) when (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-offset-property(padding-right, 0, @nudge, @base);
	}
	.left (@nudge, @base: @grid-columns) when (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-offset-property(left, 0, @nudge, @base);
	}
	.right (@nudge, @base: @grid-columns) when (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-offset-property(right, 0, @nudge, @base);
	}
	
	
	//
	// Property mixins: @span + @nudge + @base
	//
	
	// Column width
	.width (@span, @nudge, @base: @grid-columns) when (isunit(@span, '')) and (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-width-property(width, @span, @nudge, @base);
	}
	.max-width (@span, @nudge, @base: @grid-columns) when (isunit(@span, '')) and (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-width-property(max-width, @span, @nudge, @base);
	}
	.min-width (@span, @nudge, @base: @grid-columns) when (isunit(@span, '')) and (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-width-property(min-width, @span, @nudge, @base);
	}
	
	// Column offset
	.margin-left (@span, @nudge, @base: @grid-columns) when (isunit(@span, '')) and (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-offset-property(margin-left, @span, @nudge, @base);
	}
	.margin-right (@span, @nudge, @base: @grid-columns) when (isunit(@span, '')) and (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-offset-property(margin-right, @span, @nudge, @base);
	}
	.padding-left (@span, @nudge, @base: @grid-columns) when (isunit(@span, '')) and (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-offset-property(padding-left, @span, @nudge, @base);
	}
	.padding-right (@span, @nudge, @base: @grid-columns) when (isunit(@span, '')) and (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-offset-property(padding-right, @span, @nudge, @base);
	}
	.left (@span, @nudge, @base: @grid-columns) when (isunit(@span, '')) and (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-offset-property(left, @span, @nudge, @base);
	}
	.right (@span, @nudge, @base: @grid-columns) when (isunit(@span, '')) and (ispixel(@nudge)) and (isunit(@base, '')) {
		.-column-offset-property(right, @span, @nudge, @base);
	}
	
	
	//
	// Private functions
	//
	
	// Set width values
	.-column-width-property (@property, @span, @nudge, @base) when (@span > 0) and (@base > 0), not(@nudge = 0) and (@base > 0) {
		.-get-column-values(@span, @nudge, @base);
		
		@{property}: @grid-width-fallback;
		@{property}: calc(@grid-width-calc);
	}
	.-column-width-property (@property, @span, @nudge, @base) when (@span = 0) and (@nudge = 0), (@base = 0) {
		@{property}: 0;
	}
	
	// Set offset values
	.-column-offset-property (@property, @span, @nudge, @base) when not(@span = 0) and (@base > 0), not(@nudge = 0) and (@base > 0) {
		.-get-column-values(@span, @nudge, @base);
		
		@{property}: @grid-offset-fallback;
		@{property}: calc(@grid-offset-calc);
	}
	.-column-offset-property (@property, @span, @nudge, @base) when (@span = 0) and (@nudge = 0), (@base = 0) {
		@{property}: 0;
	}
	
	// Calculate grid values
	.-get-column-values (@span, @nudge, @base) {
		// Modern browsers that support calc():
		@-column-width: round((100% / @base * @span), 8);
		@-column-gutter: round(((@base - @span) / @base * @grid-gutter), 8);
		@-column-nudge: unit(@nudge, px);
		@grid-width-calc: @-column-width ~"-" @-column-gutter ~"+" @-column-nudge;
		@grid-offset-calc: @-column-width ~"+" (@grid-gutter - @-column-gutter) ~"+" @-column-nudge;
		
		// IE8, Opera mini, Android and older versions of Safari:
		@-base-width: (@grid-width * @base / @grid-columns);
		@-gutter: (percentage(@grid-gutter / @-base-width));
		@grid-width-fallback: (@-column-width - percentage(@-column-gutter / @-base-width) + percentage(@-column-nudge / @-base-width));
		@grid-offset-fallback: (@grid-width-fallback + @-gutter);
	}
}