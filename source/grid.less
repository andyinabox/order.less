//! order.less v0.1.0 | Apache License, Version 2.0 | github.com/chromice/order.less

// = = = = = =
// grid.less =
// = = = = = =
.use-grid (@columns, @gutter, @width: 940px) {
	
	@grid-columns: @columns;
	@grid-gutter: @gutter;
	@grid-width: @width;
	
	// Column width
	.grid-width (@span, @base: @grid-columns) when (@span > 0) and (@base > 0) {
		.grid-width-property(width, @span, @base);
	}
	.grid-max-width (@span, @base: @grid-columns) when (@span > 0) and (@base > 0) {
		.grid-width-property(max-width, @span, @base);
	}
	.grid-min-width (@span, @base: @grid-columns) when (@span > 0) and (@base > 0) {
		.grid-width-property(min-width, @span, @base);
	}
	
	// Column offset
	.grid-margin-left (@span, @base: @grid-columns) when not(@span = 0) and (@base > 0) {
		.grid-offset-property(margin-left, @span, @base);
	}
	.grid-margin-left (@span, @base: @grid-columns) when (@span = 0), (@base =< 0) {
		margin-left: 0;
	}
	.grid-margin-right (@span, @base: @grid-columns) when not(@span = 0) and (@base > 0) {
		.grid-offset-property(margin-right, @span, @base);
	}
	.grid-margin-right (@span, @base: @grid-columns) when (@span = 0), (@base =< 0) {
		margin-right: 0;
	}
	.grid-padding-left (@span, @base: @grid-columns) when (@span > 0) and (@base > 0) {
		.grid-offset-property(padding-left, @span, @base);
	}
	.grid-padding-left (@span, @base: @grid-columns) when (@span =< 0), (@base =< 0) {
		padding-left: 0;
	}
	.grid-padding-right (@span, @base: @grid-columns) when (@span > 0) and (@base > 0) {
		.grid-offset-property(padding-right, @span, @base);
	}
	.grid-padding-right (@span, @base: @grid-columns) when (@span =< 0), (@base =< 0) {
		padding-right: 0;
	}
	.grid-left (@span, @base: @grid-columns) when not(@span = 0) and (@base > 0) {
		.grid-offset-property(left, @span, @base);
	}
	.grid-left (@span, @base: @grid-columns) when (@span = 0), (@base =< 0) {
		left: 0;
	}
	.grid-right (@span, @base: @grid-columns) when not(@span = 0) and (@base > 0) {
		.grid-offset-property(right, @span, @base);
	}
	.grid-right (@span, @base: @grid-columns) when (@span = 0), (@base =< 0) {
		right: 0;
	}
	
	// Gutter offset
	.gutter-margin-left (@span, @base: @grid-columns) when not(@span = 0) and (@span >= -1) and (@span =< 1) and (@base > 0) {
		.grid-gutter-property(margin-left, @span, @base);
	}
	.gutter-margin-left (@span, @base: @grid-columns) when (@span = 0), (@base =< 0) {
		margin-left: 0;
	}
	.gutter-margin-right (@span, @base: @grid-columns) when not(@span = 0) and (@span >= -1) and (@span =< 1) and (@base > 0) {
		.grid-gutter-property(margin-right, @span, @base);
	}
	.gutter-margin-right (@span, @base: @grid-columns) when (@span = 0), (@base =< 0) {
		margin-right: 0;
	}
	.gutter-padding-left (@span, @base: @grid-columns) when (@span > 0) and (@span =< 1) and (@base > 0) {
		.grid-gutter-property(padding-left, @span, @base);
	}
	.gutter-padding-left (@span, @base: @grid-columns) when (@span = 0), (@base =< 0) {
		padding-left: 0;
	}
	.gutter-padding-right (@span, @base: @grid-columns) when (@span > 0) and (@span =< 1) and (@base > 0) {
		.grid-gutter-property(padding-right, @span, @base);
	}
	.gutter-padding-right (@span, @base: @grid-columns) when (@span = 0), (@base =< 0) {
		padding-right: 0;
	}
	.gutter-left (@span, @base: @grid-columns) when not(@span = 0) and (@span >= -1) and (@span =< 1) and (@base > 0) {
		.grid-gutter-property(left, @span, @base);
	}
	.gutter-left (@span, @base: @grid-columns) when (@span = 0), (@base =< 0) {
		left: 0;
	}
	.gutter-right (@span, @base: @grid-columns) when not(@span = 0) and (@span >= -1) and (@span =< 1) and (@base > 0) {
		.grid-gutter-property(right, @span, @base);
	}
	.gutter-right (@span, @base: @grid-columns) when (@span = 0), (@base =< 0) {
		right: 0;
	}
	
	// CSS columns (experimental)
	.grid-column-count (@count) {
		-webkit-column-count: @count;
		-moz-column-count: @count;
		column-count: @count;
	}
	.grid-column-width (@span, @base: @grid-columns) {
		.grid-column-count(round((@base / @span)));
	}
	.gutter-column-gap (@span, @base: @grid-columns) {
		@-gap: (@grid-gutter * @span);
		
		-webkit-column-gap: @-gap;
		-moz-column-gap: @-gap;
		column-gap: @-gap;
	}
	
	
	// Calculate grid values
	.grid-calculate-values (@span, @base) {
		// Modern browsers that support calc():
		@-column-width: round((100% / @base * @span), 8);
		@-column-gutter: round(((@base - @span) / @base * @grid-gutter), 8);
		@grid-calc-width: @-column-width ~"-" @-column-gutter;
		@grid-calc-offset: @-column-width ~"+" abs((@grid-gutter - @-column-gutter));
		
		// IE8, Opera mini, Android and older versions of Safari:
		@-direction: (@span / abs(@span));
		@-base-width: (@grid-width * @base / @grid-columns);
		@grid-fallback-width: (@-column-width - percentage(@-column-gutter / @-base-width * @-direction));
		@grid-fallback-gutter: (percentage(@grid-gutter / @-base-width));
		@grid-fallback-offset: (@grid-fallback-width + @grid-fallback-gutter * @-direction);
	}
	
	// Set property values
	.grid-width-property (@property, @span, @base) {
		.grid-calculate-values(@span, @base);
		
		@{property}: @grid-fallback-width;
		@{property}: -webkit-calc(@grid-calc-width);
		@{property}: calc(@grid-calc-width);
	}
	.grid-offset-property (@property, @span, @base) {
		.grid-calculate-values(@span, @base);
		
		@{property}: @grid-fallback-offset;
		@{property}: -webkit-calc(@grid-calc-offset);
		@{property}: calc(@grid-calc-offset);
	}
	.grid-gutter-property (@property, @span, @base) {
		.grid-calculate-values(@span, @base);
		
		@{property}: (@grid-fallback-gutter * @span);
		@{property}: -webkit-calc((@grid-gutter * @span));
		@{property}: calc((@grid-gutter * @span));
	}
}