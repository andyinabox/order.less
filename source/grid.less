//! order.less v0.5.0 | Apache License, Version 2.0 | github.com/chromice/order.less

// = = = = = =
// grid.less =
// = = = = = =
.use-grid (@width, @columns, @gutter) when (ispixel(@width)) {
	
	@grid-columns: @columns;
	@grid-gutter: @gutter;
	@grid-width: @width;
	
	// Column width
	.width (@span, @base: @grid-columns) when (unit(@span) = ~"@{span}") {
		.-grid-width-property(width, @span, @base);
	}
	.max-width (@span, @base: @grid-columns) when (unit(@span) = ~"@{span}") {
		.-grid-width-property(max-width, @span, @base);
	}
	.min-width (@span, @base: @grid-columns) when (unit(@span) = ~"@{span}") {
		.-grid-width-property(min-width, @span, @base);
	}
	
	// Column offset
	.margin-left (@span, @base: @grid-columns) when (unit(@span) = ~"@{span}") {
		.-grid-offset-property(margin-left, @span, @base);
	}
	.margin-right (@span, @base: @grid-columns) when (unit(@span) = ~"@{span}") {
		.-grid-offset-property(margin-right, @span, @base);
	}
	.padding-left (@span, @base: @grid-columns) when (unit(@span) = ~"@{span}") {
		.-grid-offset-property(padding-left, @span, @base);
	}
	.padding-right (@span, @base: @grid-columns) when (unit(@span) = ~"@{span}") {
		.-grid-offset-property(padding-right, @span, @base);
	}
	.left (@span, @base: @grid-columns) when (unit(@span) = ~"@{span}") {
		.-grid-offset-property(left, @span, @base);
	}
	.right (@span, @base: @grid-columns) when (unit(@span) = ~"@{span}") {
		.-grid-offset-property(right, @span, @base);
	}
	
	// Gutter offset
	.margin-left-gutter (@span: 1, @base: @grid-columns) {
		.-grid-gutter-property(margin-left, @span, @base);
	}
	.margin-right-gutter (@span: 1, @base: @grid-columns) {
		.-grid-gutter-property(margin-right, @span, @base);
	}
	.padding-left-gutter (@span: 1, @base: @grid-columns) {
		.-grid-gutter-property(padding-left, @span, @base);
	}
	.padding-right-gutter (@span: 1, @base: @grid-columns) {
		.-grid-gutter-property(padding-right, @span, @base);
	}
	.left-gutter (@span: 1, @base: @grid-columns) {
		.-grid-gutter-property(left, @span, @base);
	}
	.right-gutter (@span: 1, @base: @grid-columns) {
		.-grid-gutter-property(right, @span, @base);
	}
	
	// CSS columns (experimental)
	.column-count (@count) when (unit(@count) = ~"@{count}")  {
		-webkit-column-count: @count;
		-moz-column-count: @count;
		column-count: @count;
	}
	.column-width (@span, @base: @grid-columns) when (unit(@span) = ~"@{span}")  {
		.column-count(round((@base / @span)));
	}
	.column-gap (@span: 1) when (unit(@span) = ~"@{span}")  {
		@-gap: (@grid-gutter * @span);
		
		-webkit-column-gap: @-gap;
		-moz-column-gap: @-gap;
		column-gap: @-gap;
	}
	
	// Set width values
	.-grid-width-property (@property, @span, @base) when (@span > 0) and (@base > 0) {
		.get-grid-width(@span, @base);
		
		@{property}: @grid-width-fallback;
		@{property}: -webkit-calc(@grid-width-calc);
		@{property}: calc(@grid-width-calc);
	}
	.-grid-width-property (@property, @span, @base) when (@span = 0), (@base =< 0) {
		@{property}: 0;
	}
	
	// Set offset values
	.-grid-offset-property (@property, @span, @base) when not(@span = 0) and (@base > 0) {
		.get-grid-offset(@span, @base);
		
		@{property}: @grid-offset-fallback;
		@{property}: -webkit-calc(@grid-offset-calc);
		@{property}: calc(@grid-offset-calc);
	}
	.-grid-offset-property (@property, @span, @base) when (@span = 0), (@base =< 0) {
		@{property}: 0;
	}
	
	// Set gutter values
	.-grid-gutter-property (@property, @span, @base) when not(@span = 0) and (@span >= -1) and (@span =< 1) and (@base > 0) {
		.get-grid-gutter(@span, @base);
		
		@{property}: @grid-gutter-fallback;
		@{property}: -webkit-calc(@grid-gutter-calc);
		@{property}: calc(@grid-gutter-calc);
	}
	.-grid-gutter-property (@property, @span, @base) when (@span = 0), (@base =< 0) {
		@{property}: 0;
	}
	
	// Calculate grid values
	.get-grid-width (@span, @base) {
		.-get-grid-values(@span, @base);
	}
	.get-grid-offset (@span, @base) {
		.-get-grid-values(@span, @base);
	}
	.get-grid-gutter (@span, @base) {
		.-get-grid-values(@span, @base);
	}
	.-get-grid-values (@span, @base) {
		// Modern browsers that support calc():
		@-direction: (@span / abs(@span));
		@-column-width: round((100% / @base * @span), 8);
		@-column-gutter: round(((@base - @span) / @base * @grid-gutter), 8);
		@grid-width-calc: @-column-width ~"-" @-column-gutter;
		@grid-offset-calc: @-column-width ~"+" (@grid-gutter - @-column-gutter);
		@grid-gutter-calc: (@grid-gutter * @span);
		
		// IE8, Opera mini, Android and older versions of Safari:
		@-base-width: (@grid-width * @base / @grid-columns);
		@-gutter: (percentage(@grid-gutter / @-base-width));
		@grid-width-fallback: (@-column-width - percentage(@-column-gutter / @-base-width));
		@grid-offset-fallback: (@grid-width-fallback + @-gutter);
		@grid-gutter-fallback: (@-gutter * @span);
	}
}